#!/usr/bin/env python

####
# Copyright (C) 2012, 2020 Angelo Cano
#
# This file is part of Qvmdis.
#
# Qvmdis is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Qvmdis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Qvmdis.  If not, see <https://www.gnu.org/licenses/>.
####

import AddParentSysPath

from Qvm import TemplateManager, TemplateMember, parse_int

from Qvm import SYMBOL_RANGE, SYMBOL_TEMPLATE, SYMBOL_POINTER_VOID
from Qvm import SYMBOL_POINTER_BASIC, SYMBOL_POINTER_TEMPLATE, SYMBOL_BYTE
from Qvm import SYMBOL_CHAR, SYMBOL_UCHAR, SYMBOL_SHORT, SYMBOL_USHORT
from Qvm import SYMBOL_INT, SYMBOL_UINT, SYMBOL_FLOAT

import sys

def usage ():
    sys.stderr.write("%s <template name> [offset:int, 'range', 'type']\n" % sys.argv[0])
    sys.stderr.write("  default is to print as 'range'\n")
    sys.exit(1)

def output (msg):
    sys.stdout.write(msg)

def print_member_type (m):
    if m.symbolType == SYMBOL_RANGE:
        if m.parentTemplatesInfo[-1][3]:  # isTemplateRange
            output("%s" % m.parentTemplatesInfo[-1][4])
        else:
            output("0x%x" % m.size)
    elif m.symbolType == SYMBOL_TEMPLATE:
        # should only happen for arrays that use template types
        if m.isArray:
            output(m.arrayTemplate)
        else:
            output("FIXME SYMBOL_TEMPLATE")
    elif m.symbolType == SYMBOL_POINTER_VOID:
        output("*void")
    elif m.symbolType == SYMBOL_POINTER_BASIC  or  m.symbolType == SYMBOL_POINTER_TEMPLATE:
        output("*%s" % m.pointerType)
    elif m.symbolType == SYMBOL_BYTE:
        output("byte")
    elif m.symbolType == SYMBOL_CHAR:
        output("char")
    elif m.symbolType == SYMBOL_UCHAR:
        output("uchar")
    elif m.symbolType == SYMBOL_SHORT:
        output("short")
    elif m.symbolType == SYMBOL_USHORT:
        output("ushort")
    elif m.symbolType == SYMBOL_INT:
        output("int")
    elif m.symbolType == SYMBOL_UINT:
        output("uint")
    elif m.symbolType == SYMBOL_FLOAT:
        output("float")

    if m.isArray:
        for a in m.arrayLevels:
            output("[%d]" % a)

def main ():
    if len(sys.argv) < 2:
        usage()

    name = sys.argv[1]

    printAsRange = True
    printAsTypes = False
    printOffset = False
    offset = -1

    if len(sys.argv) > 2:
        arg = sys.argv[2]
        if arg == "range":
            printAsRange = True
        elif arg == "type":
            printAsTypes = True
            printAsRange = False
        else:  # try as int to print offset
            try:
                offset = parse_int(arg)
                printOffset = True
            except ValueError as ex:
                sys.stderr.write("unknown option %s\n" % arg)
                sys.exit(1)

    templateManager = TemplateManager()
    templateManager.load_default_templates()

    if name not in templateManager.symbolTemplates:
        sys.stderr.write("unknown template: %s\n" % name)
        sys.exit(1)

    tinfo = templateManager.symbolTemplates[name]
    size = tinfo[0]
    members = tinfo[1]

    if printOffset:
        # find best match
        match = None
        for m in members:
            if offset >= m.offset  and  offset < (m.offset + m.size):
                if match == None:
                    match = m
                else:
                    if m.size < match.size:
                        match = m

        if match:
            output("0x%x 0x%x %s (+0x%x)\n" % (match.offset, match.size, match.name, offset - match.offset))
            sys.exit(0)
        else:
            # didn't find anything
            sys.stderr.write("couldn't find offset member\n")
            sys.exit(1)

    # print as range or types
    output("%s 0x%x\n" % (name, size))
    output("{\n")

    if printAsRange:
        for m in members:
            output("    " * len(m.parentTemplatesInfo))
            output("0x%x 0x%x %s" % (m.offset, m.size, m.name))

            if m.parentTemplatesInfo[-1][3]:  # isTemplateRange
                output("  ; template %s" % m.parentTemplatesInfo[0][4])
            else:
                if m.symbolType != SYMBOL_RANGE:
                    output("  ; ")
                    print_member_type(m)

            output("\n")
    else:  # as types
        for m in members:
            # skip sub template members
            if len(m.parentTemplatesInfo) > 1:
                continue

            output("    0x%x " % m.offset)
            print_member_type(m)
            output(" %s" % m.name)
            output("\n")

    output("}\n")

if __name__ == "__main__":
    main()
