#!/usr/bin/env python

####
# Copyright (C) 2012, 2020 Angelo Cano
#
# This file is part of Qvmdis.
#
# Qvmdis is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Qvmdis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Qvmdis.  If not, see <https://www.gnu.org/licenses/>.
####

import AddParentSysPath

from Qvm import TemplateManager, TemplateMember, parse_int

from Qvm import SYMBOL_RANGE, SYMBOL_TEMPLATE, SYMBOL_POINTER_VOID
from Qvm import SYMBOL_POINTER_BASIC, SYMBOL_POINTER_TEMPLATE, SYMBOL_BYTE
from Qvm import SYMBOL_CHAR, SYMBOL_UCHAR, SYMBOL_SHORT, SYMBOL_USHORT
from Qvm import SYMBOL_INT, SYMBOL_UINT, SYMBOL_FLOAT

import os, sys

def usage ():
    sys.stderr.write("Usage: %s [--list-aconsts, --list-aliases, --list-templates, --print-all, --no-comments] <template or alias name> [offset:int, 'range', 'type', 'raw', 'aconst']\n" % os.path.basename(sys.argv[0]))
    sys.stderr.write("\n")
    sys.stderr.write("  default is to print as 'range'\n")
    sys.exit(1)

def output (msg):
    sys.stdout.write(msg)

def print_member_type (m):
    if m.symbolType == SYMBOL_RANGE:
        if m.parentTemplatesInfo[-1][3]:  # isTemplateRange
            output("%s" % m.parentTemplatesInfo[-1][4])
        else:
            output("0x%x" % m.size)
    elif m.symbolType == SYMBOL_TEMPLATE:
        # should only happen for arrays that use template types
        if m.isArray:
            output(m.arrayTemplate)
        else:
            output("FIXME SYMBOL_TEMPLATE")
    elif m.symbolType == SYMBOL_POINTER_VOID:
        output("*" * m.pointerDepth)
        output("void")
    elif m.symbolType == SYMBOL_POINTER_BASIC  or  m.symbolType == SYMBOL_POINTER_TEMPLATE:
        output("*" * m.pointerDepth)
        output("%s" % m.pointerType)
    elif m.symbolType == SYMBOL_BYTE:
        output("byte")
    elif m.symbolType == SYMBOL_CHAR:
        output("char")
    elif m.symbolType == SYMBOL_UCHAR:
        output("uchar")
    elif m.symbolType == SYMBOL_SHORT:
        output("short")
    elif m.symbolType == SYMBOL_USHORT:
        output("ushort")
    elif m.symbolType == SYMBOL_INT:
        output("int")
    elif m.symbolType == SYMBOL_UINT:
        output("uint")
    elif m.symbolType == SYMBOL_FLOAT:
        output("float")

    if m.isArray:
        for a in m.arrayLevels:
            if a.name:
                output("[%s:%d]" % (a.name, a.value))
            else:
                output("[%d]" % a.value)

def dumpObject (obj, indent=0):
   for attr in dir(obj):
       if hasattr(obj, attr):
           output(" " * indent)
           output("%s = %s\n" % (attr, getattr(obj, attr)))

class PrintType:
    RANGE = 0
    TYPE = 1
    RAW = 2

def main ():
    if len(sys.argv) < 2:
        usage()

    printAll = False
    addComments = True

    # handle '--' options
    args = []
    args.append(sys.argv[0])
    checkDashOptions = True
    for a in sys.argv[1:]:
        if checkDashOptions:
            if a == "--":
                # all done, pass the rest as is
                checkDashOptions = False
            elif a[0] != '-':
                args.append(a)
                checkDashOptions = False
            elif a == "--list-aconsts":
                templateManager = TemplateManager()
                templateManager.load_default_templates()

                keys = sorted(templateManager.arrayConstants.keys())
                output("array constants:\n\n")
                for k in keys:
                    output("%s\n" % k)
                sys.exit(0)
            elif a == "--list-aliases":
                templateManager = TemplateManager()
                templateManager.load_default_templates()

                keys = sorted(templateManager.templateAliases.keys())
                output("aliases:\n\n")
                for k in keys:
                    output("%s\n" % k)
                sys.exit(0)
            elif a == "--list-templates":
                templateManager = TemplateManager()
                templateManager.load_default_templates()

                keys = sorted(templateManager.symbolTemplates.keys())
                output("templates:\n\n")
                for k in keys:
                    output("%s\n" % k)
                sys.exit(0)
            elif a == "--print-all":
                printAll = True
            elif a == "--no-comments":
                addComments = False
            else:
                sys.stderr.write("unknown option: %s\n" % a)
                sys.exit(1)
        else:
            args.append(a)

    if not printAll:
        commandLineName = args[1]

    printType = PrintType.RANGE

    printArrayConstant = False
    printOffset = False
    offset = -1

    if len(args) > 2:
        arg = args[2]
        if arg == "range":
            printType = PrintType.RANGE
        elif arg == "type":
            printType = PrintType.TYPE
        elif arg == "raw":
            printType = PrintType.RAW
        elif arg == "aconst":
            printArrayConstant = True
        else:  # try as int to print offset
            try:
                offset = parse_int(arg)
                printOffset = True
            except ValueError as ex:
                sys.stderr.write("unknown option: %s\n" % arg)
                sys.exit(1)

    templateManager = TemplateManager()
    templateManager.load_default_templates()

    # constants

    if printAll:
        names = sorted(templateManager.arrayConstants.keys())
    else:
        names = [commandLineName]

    if printAll  or  printArrayConstant:
        for name in names:
            if name not in templateManager.arrayConstants:
                sys.stderr.write("unknown array constant: %s\n" % name)
                sys.exit(1)
            output("array constant %s : %d\n" % (name, templateManager.arrayConstants[name]))
            if not printAll:
                sys.exit(0)

    # aliases

    if printAll:
        names = sorted(templateManager.templateAliases.keys())
    else:
        names = [commandLineName]

    for name in names:
        if name in templateManager.templateAliases:
            ainfo = templateManager.templateAliases[name]
            output("alias: %s\n" % ainfo.name)
            if printType == PrintType.RAW:
                dumpObject(ainfo, 2)
            else:
                if ainfo.declaration != ainfo.expansion:
                    output("  %s  ->  %s\n" % (ainfo.declaration, ainfo.expansion))
                else:
                    output("  %s\n" % ainfo.declaration)
            if not printAll:
                sys.exit(0)

    # templates

    if printAll:
        names = sorted(templateManager.symbolTemplates.keys())
    else:
        names = [commandLineName]

    for name in names:
        if name not in templateManager.symbolTemplates:
            sys.stderr.write("unknown template or alias: %s\n" % name)
            sys.exit(1)

        tinfo = templateManager.symbolTemplates[name]
        size = tinfo.size
        paddingSize = tinfo.paddingSize
        paddingUsed = tinfo.paddingUsed
        members = tinfo.members

        if printOffset:
            # find best match
            match = None
            for m in members:
                if offset >= m.offset  and  offset < (m.offset + m.size):
                    if match == None:
                        match = m
                    else:
                        if m.size < match.size:
                            match = m

            if match:
                output("0x%x 0x%x %s (+0x%x)\n" % (match.offset, match.size, match.name, offset - match.offset))
                if not printAll:
                    sys.exit(0)
            else:
                # didn't find anything
                sys.stderr.write("couldn't find offset member\n")
                if not printAll:
                    sys.exit(1)
            continue

        if printType == PrintType.RAW:
            output("%s 0x%x (paddingSize 0x%x, paddingUsed 0x%x)   ---->\n" % (name, size, paddingSize, paddingUsed))
            output("\n")
            dumpObject(tinfo, 2)
            output("\n")
            output("{\n")

            for m in members:
                output("\n")
                indent = 4 * len(m.parentTemplatesInfo)
                output(" " * indent)
                output("0x%x 0x%x %s    ---->\n" % (m.offset, m.size, m.name))
                output("\n")
                dumpObject(m, indent + 2)
            output("}\n")
            continue

        # print as range or types
        output("%s 0x%x (paddingSize 0x%x, paddingUsed 0x%x)\n" % (name, size, paddingSize, paddingUsed))
        output("{\n")

        if printType == PrintType.RANGE:
            for m in members:
                output("    " * len(m.parentTemplatesInfo))
                output("0x%x 0x%x %s" % (m.offset, m.size, m.name))

                if m.parentTemplatesInfo[-1][3]:  # isTemplateRange
                    if addComments:
                        output("  ; template %s" % m.parentTemplatesInfo[0][4])
                else:
                    if m.symbolType != SYMBOL_RANGE:
                        if addComments:
                            output("  ; ")
                            print_member_type(m)
                if m.aliasUsed:
                    if addComments:
                        output(" alias %s" % m.origName)

                output("\n")
        else:  # as types
            for m in members:
                # skip sub template members
                if len(m.parentTemplatesInfo) > 1:
                    continue

                output("    0x%x " % m.offset)
                print_member_type(m)
                output(" %s" % m.name)
                if m.aliasUsed:
                    if addComments:
                        output(" ; alias %s" % m.origName)
                output("\n")

        output("}\n")

if __name__ == "__main__":
    main()
